#./train-departure-viewer/docker-compose.yml
version: '3.4'

services:
    postgres:
        image: postgres:10-alpine
        env_file:
          - ./.env
        volumes: 
          - pgdata:/var/lib/postgresql/data
        networks:
            - main
        ports:
            - "5432:5432"
        restart: on-failure
        
          
    redis:
        image: redis:alpine
        restart: on-failure
        networks:
            - main
    
    backend:
        build: ./backend
        image: backend-image
        command: sh -c "bash wait-for-it.sh -t 0 postgres:5432 && python manage.py collectstatic --no-input && python manage.py makemigrations && python manage.py migrate && gunicorn train_departure_viewer.wsgi --user www-data --bind 0.0.0.0:8000 --workers 1"
        ports:
            - "8000:8000"
        env_file:
            - ./.env
        networks:
            - main
        depends_on:
            - postgres
            - redis
        restart: on-failure
        volumes:
            - ./backend/wait-for:/bin/wait-for
            - ./backend/static_root/:/opt/app/backend/static
        
    nginx:
        command: wait-for backend:8000 -- nginx -g "daemon off;"
        build: ./frontend
        depends_on:
            - backend
        networks:
            - main
        ports:
            - "8080:8080"
        restart: on-failure
        volumes:
            - ./wait-for:/bin/wait-for
            - ./nginx.conf:/etc/nginx/nginx.conf
            - ./backend/static_root/:/static
        
    celery_worker:
        command: sh -c "bash wait-for-it.sh -t 0 redis:6379 && bash wait-for-it.sh -t 0 backend:8000 -- celery -A train_departure_viewer worker -l INFO"
        depends_on:
            - backend
            - postgres
            - redis
        env_file:
            - ./.env
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure
        hostname: celery_worker
        image: backend-image
        networks:
            - main
        restart: on-failure

    celery_beat:
        command: sh -c "bash wait-for-it.sh -t 0 redis:6379 && bash wait-for-it.sh -t 0 backend:8000 -- celery -A train_departure_viewer beat -l INFO"
        depends_on:
            - backend
            - postgres
            - redis
        env_file:
            - ./.env
        hostname: celery_beat
        image: backend-image
        networks:
            - main
        restart: on-failure
    
volumes:
    pgdata:
    static:
    
networks:
    main: